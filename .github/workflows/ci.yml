name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.17.0'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== Code Quality & Linting =====
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Lint Frontend
        run: cd frontend && npm run lint

      - name: Lint Backend
        run: cd backend && python -m flake8 app/ && python -m mypy app/

      - name: Format Check
        run: |
          cd frontend && npm run format -- --check
          cd ../backend && python -m black --check app/ && python -m isort --check-only app/

  # ===== Frontend Testing =====
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Type Check
        run: cd frontend && npm run type-check

      - name: Unit Tests
        run: cd frontend && npm run test:unit

      - name: Integration Tests
        run: cd frontend && npm run test:integration

      - name: Coverage Report
        run: cd frontend && npm run test:coverage

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ===== Backend Testing =====
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      neo4j:
        image: neo4j:5.17
        env:
          NEO4J_AUTH: neo4j/test_password
        ports:
          - 7687:7687

      elasticsearch:
        image: elasticsearch:8.12.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: cd backend && pip install -r requirements.txt

      - name: Unit Tests
        run: cd backend && python -m pytest app/tests/unit -m unit --cov=app --cov-report=xml
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/15
          NEO4J_URI: bolt://localhost:7687
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Integration Tests
        run: cd backend && python -m pytest app/tests/integration -m integration --cov=app --cov-append --cov-report=xml
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/15
          NEO4J_URI: bolt://localhost:7687
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ===== Security Testing =====
  security:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Frontend Security Audit
        run: cd frontend && npm audit --audit-level=high

      - name: Backend Security Scan
        run: cd backend && python -m bandit -r app/ -f json -o bandit-report.json

      - name: Python Safety Check
        run: cd backend && python -m safety check --json --output safety-report.json

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  # ===== End-to-End Testing =====
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Install Playwright
        run: cd frontend && npx playwright install --with-deps

      - name: Start services
        run: |
          docker-compose up -d postgres redis neo4j elasticsearch
          sleep 30

      - name: Run E2E tests
        run: cd frontend && npm run e2e
        env:
          CI: true

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # ===== Performance Testing =====
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start services
        run: |
          docker-compose up -d
          sleep 60

      - name: Run Load Tests
        run: cd tests/performance && k6 run load-test.js

      - name: Run Stress Tests
        run: cd tests/performance && k6 run stress-test.js

  # ===== Build & Deploy =====
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [security, e2e]
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== Deploy to Development =====
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Deploy to Development
        run: |
          echo "Deploying to development environment"
          # Add deployment scripts here

  # ===== Deploy to Staging =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment scripts here

  # ===== Deploy to Production =====
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment"
          # Add deployment scripts here

  # ===== Notification =====
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.deploy-prod.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-dev.result == 'success' }}
        run: |
          echo "Deployment successful!"
          # Add notification logic here

      - name: Notify Failure
        if: ${{ needs.deploy-prod.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-dev.result == 'failure' }}
        run: |
          echo "Deployment failed!"
          # Add notification logic here 